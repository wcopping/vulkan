

--------------------------------------------------------------------------------
  SETUP
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
    validation layers
--------------------------------------------------------------------------------
    Vulkan is structured such that much of the settings for the GPU are set
    through structs and not function parameters

    general object creation pattern in Vulkan
      pointer to struct with creation info
      pointer to custom allocator callbacks, always nullptr in this tutorial
      pointer to variable that stores handle to the new object

    validation layers
      Vulkan aims at minimal driver overhead therefore there is very limited
      error checking by the API by default
      The API is finicky and can be broken easily without warning
      The API adds validation layers to check that all is well
      Common operations in validation layers include:
        check values of parameters against specification to detect misuse
        track creation and destruction of objects to find resource leaks
        check thread safety by tracking the threads that calls originate from
        log every call and its parameters to the standard output
        trace vulkan calls for profiling and replaying
      Can ENABLE for debug builds and DISABLE for release builds
      LunarG SDK provides them open-source

    message callback
      Useful to allow validation layers to talk with us about what is going
      wrong

    get required extensions
      returns required list of extensions based on whether validation whether
      validation layers enabled or not

    debug callback
      setup so that you can control messaging based on severity of message
      look at the function, it allows you to use a conditional to output if
      severity is high enough using:
        if (message_severity >= VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT)
          // message is important enough to show
      p_callback_data is a VkDebugUtilsMessengerCallbackDataEXT struct with
      the important data members pMessage, pObjects, objectCount
      Look to the vulkan-tutorial Validation Layers page under Setup for details

    load in the debug messenger extension
      this function is an extension function and so is not loaded in
      automatically (via GLFW?) and so you must load it in yourself with:
      vkGetInstanceProcAddr
      and a proxy function:
      VkResult create_debug_utils_messenger_EXT

    cleanup the debug messenger extension
      this function must be similarly treated as the above
      it is not automatically loaded and so you must load it yourself
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
  physical devices and queue families
--------------------------------------------------------------------------------
    devices
    -------
    The graphics card we'll use is stored in a VkPhysicalDevice handle
    this object is destroyed when we destroy the VkInstance

    Devices are loaded into a vector and each is checked to see if it is
    suitable for use by Vulkan
    The first suitable GPU is selected as this instance's device

    We can evaluate suitability of a device by looking at it's device properties
    through vkGetPhysicalDeviceFeatures
    We can also give each device a score and use the device with the highest
    score

    queue families
    --------------
    Almost anything that happens in Vulkan will requires commands to be
    submitted to a queue
    Different queues come from different queue families
    Each queue family only allows a given subset of commands
    E.g. there may be a queue family that only allows compute related commands

    We need to check that we have access to the right queue families
    For now we just concern ourselves with graphics commands
    You need to find and use a queue family that suits your needs
    You can get the information you need through vkGetPhysicalDeviceQueueFamilyProperties
    We are looking for VK_QUEUE_GRAPHICS_BIT support
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
  logical device and queues
--------------------------------------------------------------------------------
    logical device
    --------------
    It seems like you can have multiple physical devices supported but they are
    managed through a single logical device...?
    You can also create multiple logical devices for a single physical device
    if your needs vary.

    When you create a logical device you must specify the extensions and
    validation layers
      These are DEVICE SPECIFIC
      An example of a DEVICE SPECIFIC extension is VK_KHR_swapchain
      Some devices might not support some extensions or features

    We must cleanup with vkDestroyDevice

    queues
    ------
    Get queue information through VkDeviceQueueCreateInfo

    You can influence the scheduling of command buffer execution through
    assigning floating point numbers (0.0 through 1.0) to different queues
      You must do this even if there is only 1 queue (just set to 1.0f)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
  PRESENTATION
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
    window surface
--------------------------------------------------------------------------------
    Vulkan is platform agnostic and therefore does not know what window it will
    be interfacing with.
      We need to use the WSI (window system integration) extensions
      We need to use VK_KHR_SURFACE which exposes a VkSurfaceKHR object
        represents abstract type of surface to present rendered images to
      It is automatically got by glfwGetRequiredInstanceExtensions along with a
      few other necessary extensions in the list provided by that function

    Vulkan does not REQUIRE a window surface (unlike OpenGL which requires at
    least an invisible one), meaning you can run a graphics program just for the
    compute ability or off screen rendering from the graphics API .

    You must ensure that both your Vulkan implementation and your DEVICE support
    graphics presentation
      Therefore you must check that graphics presentation is supported by some
      queue family you are using
      Drawing and presenting are not bound to same queue families and you must
      ensure that both are supported to move forward
      Or you could explicitly select a device that has both in the same family

    presentation queue
    ------------------
    We must modify logical device creation to create presentation queue

--------------------------------------------------------------------------------
    swapchain
--------------------------------------------------------------------------------
    Vulkan has no default framebuffer
    We instead have a swap chain which owns the buffers we render to before we
    visualize them on the screen
      This must be explicitly created
      Essentially is a queue of images waiting to be presented to the screen
      General purpose is synchronize image presentation with screen refresh rate
      We can control how the queue works and conditions through set up of the
      swapchain
    We must check for swapchain support

    Setting up the swapchain is more involved than the physical or logical device

    core components of swapchain are the PHYSICAL DEVICE and the WINDOW SURFACE

    must determine three settings:
      surface format (color depth)
      presentation mode (conditions for "swapping" images to the screen)
      swap extent (resolution of images in swapchain)
        almost always equal to resolution of windowe we're drawing to
        range is defined in VkSurfaceCapabilitiesKHR structure

    each VkSurfaceFormatKHR contains a format and a colorSpace member
      format indicates color channels and types
      colorSpace indicates if SRGB color space is supported

    Arguably most important setting for swapchain is "PRESENTATION MODE"
      It represents actual conditions for showing images to the screen

    Now that we have made all the necessary helper functions:
      choose_swap_surface_format
      choose_swap_present_mode
      choose_swap_extent
    We can put them together in create_swapchain

    NOTE ON POST PROCESSING!!
    in create_swapchain function
      VkSwapChainCreateInfo data type has bit field "imageUsage"
      This field specifies what kind of operations we'll use the images in the
      swap chain for. E.g. POST PROCESSING! we would use
      VK_IMAGE_USAGE_TRANSFER_DST_BIT to transfer the image to another image
      then use a memory operation to transfer the rendered image to the swapchain
      image

    NOTE:
    function check_device_extension_support is a beautiful piece of code in my
    opinion
      It uses vector member functions I don't usually see (erase and empty)
--------------------------------------------------------------------------------
    image views
--------------------------------------------------------------------------------
    an image view describes how to access the image and which part of the image
    to access.
    E.g. if it should be treated as a 2D texture depth texture w/o mipmapping
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
  GRAPHICS AND PIPELINE BASICS
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
    image views
--------------------------------------------------------------------------------
    Vulkan and OpenCL use SPIR-V as it's shader code language.
    SPIR-V is a bytecode format language.
    It can be used to write both compute and graphics shaders.
    It is a bytecode language to help restrict GPU vendors from creating
    compilers that stray from the path and may make code that works in compiler
    inoperable in another.
    Khronos has released their own vendor independent compiler which compilers
    GLSL to SPIR-V binary which you can ship with your program
    SPIR-V is included in the LunarG SDK as glslangValidator.exe

    GLSL is a C-style language.
    Programs written in it have a main function which runs for every object.
    It uses global variables, rather than parameters, for input and output.
    Includes built in vector and matrix primitives!

    vertex shader
    -------------
    You must tell Vulkan in what stage your vertex shader will be used through
    the VkPipelineShaderStageCreateInfo's stage member variable
    Interesting NOTE:
      Look at the pName member variable, it is the name of the function to
      invoke, known as the ENTRYPOINT.
      This means we can combine multiple fragment shaders into a single shader
      module and use different ENTRYPOINTS to differentiate between their
      behaviors!

    ---------------
    Fixed functions
    ---------------
    VkPipelineInputAssemblyStateCreateInfo describes:
      what kind of geometry will be drawn from vertices
      if primitive restart should be enabled
    geometry is defined by the topology member variable and can be a number
    of predefined enumeration values
    primitive restart controlled through primitiveRestartEnable

    viewport
    region of framebuffer that output is rendered to
    almost always (0, 0) to (swapchain_extent.width, swapchain_extent.height)

    rasterizer
    turns geometry from vertex shader and turns into fragments to be colored
    many knobs to turn here which allow you to control the way you color the
    geometry, how you cull the geometry, etc. etc.

    multisampling
    way to perform anti-aliasing
    combine multiple polygons that rasterize to the same pixel
    effective at edge points

    color blending
    the color that is returned by the fragment shader must be combined with the
    color that is already in the framebuffer
    you can:
      mix old and new value to produce final color
      combine old and new with bitwise operation (INTERESTING!)

    Dynamic State
    some of the state specified in the previous structures we made
    CAN BE CHANGED WITHOUT RECREATING THE PIPELINE.
    E.g. viewport size, line width, blend constants
    To be able to do this you need to create a VkPipeLineDynamicStateCreateInfo
    structure

    Pipeline Layout
    you can use UNIFORM values in shaders which are globals that can be changed
    at drawing time to alter the behavior of your shaders without having to
    recreate them
    E.g. pass transformation matrix to vertex shader, create texture samplers
    in the fragment shader
    We specify these uniforms in the graphics pipeline through VkPipelineLayout
    objects


    -------------
    Render Passes
    -------------
    Render Passes
    Several things happen while rendering
    We need to specify how many color and depth buffers there will be,
    how many samples to use for each of them, and how their contents should be
    handled throughout the rendering operations

    We are just printing an image out to the screen and so we only need
    a single color buffer attachment
    The color attachment format should be the same as the swapchain image format

    Subpasses
    Render passes consist of one or more subpasses
    You can apply consecutive subpasses inside a single render pass to produce
    post processing
    If you group subpasses into a single render pass then Vulkan can conserve
    memory by reordering these effectively... or something...
    INTERESTING NOTE:
      We must explicitly say that the subpass we are using is a graphics subpass
      via the VkSubpassDescription object
      This is because VULKAN MAY SUPPORT COMPUTE SUBPASSES IN THE FUTURE.
    ----------------
    Concluding Notes
    ----------------
    recap:
      Shader Stages - shader modules define functionality of programmable parts
      of graphics pipeline
      Fixed-Function - a ton of structures we have to explicitly fill in to
      ensure the graphics pipeline is appropriately configured for our use-case
      Pipeline Layout - uniform and push values referenced by the shaders that
      can be updated AT DRAW  TIME
      Render Pass - attachments referenced by pipeline stages and their usage

    all of these combine into the VkGraphicsPipelineCreateInfo object

    the vkCreateGraphicsPipeline function is designed to take multiple
    VkGraphicsPipelineCreateInfo objects and create multiple VkPipeline objects
    in a single call
    You can also pass a pipeline cache object which is good for storing info
    about relevant pipeline creation across multiple calls to
    vkCreateGraphicsPipelines
    ---------------
    Command Buffers
    ---------------
    Command Pools
    You must first record any operation you want to run in command buffers.
    Including drawing operations and memory transfers!
    You do this in advance then apply it to one or more threads.
    Then you execute these commands in the main loop.

    First you must create a COMMAND POOL which manages the memory used to store
    the buffers and command buffers are allocated from them

    We then submit the command buffer to a device queue
    Each COMMAND POOL can only allocate COMMAND BUFFERS submitted on a
    SINGLE TYPE OF QUEUE
    We want to draw, therefore we will record commands for drawing, therefore
    we chose the GRAPHICS QUEUE FAMILY

    Command Buffers
    Allocate command buffers and record drawing commands in them
    After it is set up you should begin RECORDING it
    For each framebuffer you should instantiate a new VkCommandBufferBeginInfo
    object and fill in the structure
    Begin the render pass wtih vkCmdBeginRenderPass

    All the functions that record commands are recognized by their
    vkCmd prefix
    They all return void so error handling happens after recording is finished
    The first parameter for EVERY COMMAND is always command buffer to record to

    draw_frame
    ----------
    acquire image from swapchain
    execute command buffer with that image as attachment in the framebuffer
    return image to the swapchain for presentation

    the function is called and returned before the operations it starts finish
    the order of this execution is undefined
    but each of these operations depends on the last
    THEREFORE WE NEED EITHER SEMAPHORES OR FENCES

    To synchronize swapchain events you need to use either FENCES or SEMAPHORES
    These are objects that signal whether an operation is complete and the other
    object checks to see if the first is complete
    A FENCE's state can be accessed from your program using calls like
    vkWaitForFences, semaphores cannot be accessed in this manner.
    FENCES are mainly for synchronizing your application with rendering
    operations, a SEMAPHORE is for synchronizing operations within or across
    command queues

    We need one semaphore to signal that an image has been acquired and is ready
    for rendering, the other will signal that rendering has finished

    NOTE:
    YOU NEED TO GO OVER SEMAPHORES/FENCES AND THEIR USE IN QUEUE/COMMAND
    SUBMISSION FOR GRAPHICS

    Subpass Dependencies
    Subpasses in a render pass take care of image layout transitions
    These submissions are taken care of by SUBPASS DEPENDENCIES
    Even though we only have one subpass for this simple program, we still have
    to consider the actions immediately before and after this subpass, these are
    indeed subpass dependencies
    To ensure this is met we can make sure the render pass waits for the
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT stage
    We have to create and fill a VkSubpassDependency struct
    and point render_pass_ci.pDependencies to it

    Presentation
    LAST STEP IN DRAWING A FRAME
    submit the result back to the swapchain to have it eventually show up on the
    screen

    VERTEX BUFFERS
    --------------

    We have to tell Vulkan how to pass data to the vertex shader once it's been
    uploaded into the GPU memory
    Do this through VkVertexInputBindingDescription struct
    it describes the behavior and rate of moving data from GPU memory to shader
    We also need VkVertexInputAttributeDescription
    We have interleaved two attributes into our Vertex structure. They are,
    of course, position and color, and therefore we need 2 of these structures

    Buffers in Vulkan are regions of memory used to store arbitrary data that
    can be read by the GPU
    The programmer is responsible for memory management of these buffers in
    Vulkan

    First step of allocating memory to buffer is query its memory requirements
    using vkGetBufferMemoryRequirements
    There are different types of memory allowed by the GPU to allocate from
    Each type can have different allowed operations and performance characteristics

    Associate memory allocated with vkAllocateMemory with a buffer using
    vkBindBufferMemory

    Copy vertex data to the buffer, then memcpy vertex data to mapped memory

    Staging Buffer
    --------------
    The best memory type for the GPU to read from the CPU is
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
    but this is usually not accessible by the CPU on dedicated graphics cards
    SOLUTION: Create TWO vertex buffers
    ONE: STAGING BUFFER stages/uploads vertex dat from vertex array into CPU
    accessible memory
    TWO: FINAL VERTEX BUFFER to be used by the GPU
    We transfer data between the two via a buffer copy command

    Memory transfer operations are executed using command buffers just like
    drawing commands

    Index Buffer
    ------------
    We use one to use less memory and to make shape making easier
    We set everything up similar to the staging/vertex buffers
